using System;
using System.IO;
using System.Timers;

using System.Configuration;

namespace SimpleLogger2
{
    internal class DefalutLogger
    {
        public DefalutLogger()
        {
            string infoOnConsoleStr = ConfigurationManager.AppSettings["InfoOnConsole"]; // 만일 해당하는 값이 App.config에 없으면 null
            if (!string.IsNullOrEmpty(infoOnConsoleStr)) InfoOnConsole = bool.Parse(infoOnConsoleStr.Trim());
            else InfoOnConsole = true; // 기본값

            string debugOnConsoleStr = ConfigurationManager.AppSettings["DebugOnConsole"]; // 만일 해당하는 값이 App.config에 없으면 null
            if (!string.IsNullOrEmpty(debugOnConsoleStr)) DebugOnConsole = bool.Parse(debugOnConsoleStr.Trim());
            else DebugOnConsole = true;

            string errorOnColsoleStr = ConfigurationManager.AppSettings["ErrorOnConsole"]; // 만일 해당하는 값이 App.config에 없으면 null
            if (!string.IsNullOrEmpty(errorOnColsoleStr)) ErrorOnConsole = bool.Parse(errorOnColsoleStr.Trim());
            else ErrorOnConsole = true;

            string asyncStr = ConfigurationManager.AppSettings["Async"]; // 만일 해당하는 값이 App.config에 없으면 null
            if (!string.IsNullOrEmpty(asyncStr)) Async = bool.Parse(asyncStr.Trim());
            else Async = true;

            string autoFlushWaitStr = ConfigurationManager.AppSettings["AutoFlushWait"]; // 만일 해당하는 값이 App.config에 없으면 null
            if (!string.IsNullOrEmpty(autoFlushWaitStr)) AutoFlushWait = double.Parse(autoFlushWaitStr.Trim());
            else AutoFlushWait = 3000;

            string logFolderPathStr = ConfigurationManager.AppSettings["LogFolderPath"];
            if (!string.IsNullOrEmpty(autoFlushWaitStr))
            {
                if (Path.IsPathRooted(logFolderPathStr)) LogFolderPath = logFolderPathStr;
                else LogFolderPath = Path.Combine(System.Environment.CurrentDirectory, logFolderPathStr);
            }
            else LogFolderPath = Path.Combine(System.Environment.CurrentDirectory, "log");

            //Console.WriteLine("{0}, {1}, {2}, {3}, {4}, {5}", InfoOnConsole, DebugOnConsole, ErrorOnConsole, Async, AutoFlushWait, LogFolderPath);

            _timer.AutoReset = true;
            _timer.Elapsed += _timer_Elapsed;
            _timer.Start();
        }

        public DefalutLogger(bool infoOnConsole, bool debugOnConsole, bool errorOnColsole, bool async, double autoFlushWait, string logFolderPath)
        {
            InfoOnConsole = infoOnConsole;
            DebugOnConsole = debugOnConsole;
            ErrorOnConsole = errorOnColsole;
            Async = async;
            AutoFlushWait = autoFlushWait;
            LogFolderPath = logFolderPath;

            _timer.AutoReset = true;
            _timer.Elapsed += _timer_Elapsed;
            _timer.Start();
        }

        public bool InfoOnConsole { get; set; }
        public bool DebugOnConsole { get; set; }
        public bool ErrorOnConsole { get; set; }
        public bool Async { get; set; }

        public double AutoFlushWait
        {
            get
            {
                return _timer.Interval;
            }
            set
            {
                _timer.Interval = value;
            }
        }

        public string LogFolderPath
        {
            get
            {
                return _logFolderPath;
            }
            set
            {
                if (!Directory.Exists(value))
                    Directory.CreateDirectory(value);

                _logFolderPath = value;
            }
        }

        private string _fileName;
        private string _logFolderPath;

        private TextWriter _writer;
        private object _writerCreateLock = new object();

        private int _bufferSize;
        private int _bufferCount;
        private Timer _timer = new Timer();

        public event LoggedEventHandler InfoLogged;

        public event LoggedEventHandler DebugLogged;

        public event LoggedEventHandler ErrorLogged;

        public void Debug(string text)
        {
            // thread-safe 인 _writer 를 점유하고 있는 놈이 완전히 처리하기 전에 불리는 count 를 센다.
            _bufferCount++;

            // 새로 생기거나 날짜가 바뀌면 새로운 _streamWriter 를 할당한다.
            if (_fileName == null || !_fileName.StartsWith(DateTime.Now.ToString("yyyyMMdd")))
            {
                lock (_writerCreateLock)
                {
                    if (_writer != null)
                        _writer.Close();

                    string assemblyName = System.Reflection.Assembly.GetEntryAssembly().GetName().Name;
                    _fileName = DateTime.Now.ToString("yyyyMMdd") + "." + assemblyName + ".txt";

                    _writer = TextWriter.Synchronized(new StreamWriter(Path.Combine(_logFolderPath, _fileName), true)); // thread-safe
                }
            }

            // 파일에 적는다
            if (Async)
                _writer.WriteLineAsync(text);
            else
            {
                _writer.WriteLine(text);
                _writer.Flush();
            }

            // 버퍼에 쌓여있는 양을 처리하고 나면 동일한 양의 로그가 또 쌓여있는 상황을 이상적인 _bufferSize 로 본다.
            if (_bufferCount > _bufferSize) _bufferSize = Math.Min(_bufferSize + 1, int.MaxValue);
            else _bufferSize = Math.Max(_bufferSize - 1, 0);

            //Console.WriteLine("_bufferCount = {0}, _bufferSize = {1}", _bufferCount, _bufferSize);

            if (_bufferCount >= _bufferSize)
                Flush();

            if (DebugOnConsole)
                Console.WriteLine(text);

            // 이벤트 발생
            DebugLogged?.Invoke(this, new LoggedEventArgs(text));
        }

        public void Error(string text)
        {
            // thread-safe 인 _writer 를 점유하고 있는 놈이 완전히 처리하기 전에 불리는 count 를 센다.
            _bufferCount++;

            // 새로 생기거나 날짜가 바뀌면 새로운 _streamWriter 를 할당한다.
            if (_fileName == null || !_fileName.StartsWith(DateTime.Now.ToString("yyyyMMdd")))
            {
                lock (_writerCreateLock)
                {
                    if (_writer != null)
                        _writer.Close();

                    //System.Reflection.Assembly assembly1 = System.Reflection.Assembly.GetExecutingAssembly();
                    //System.Reflection.Assembly assembly2 = System.Reflection.Assembly.GetCallingAssembly();
                    //System.Reflection.Assembly assembly3 = System.Reflection.Assembly.GetEntryAssembly();

                    

                    string assemblyName = System.Reflection.Assembly.GetEntryAssembly().GetName().Name;
                    _fileName = DateTime.Now.ToString("yyyyMMdd") + "." + assemblyName + ".txt";

                    _writer = TextWriter.Synchronized(new StreamWriter(Path.Combine(_logFolderPath, _fileName), true)); // thread-safe
                }
            }

            // 파일에 적는다
            if (Async)
                _writer.WriteLineAsync(text);
            else
            {
                _writer.WriteLine(text);
                _writer.Flush();
            }

            // 버퍼에 쌓여있는 양을 처리하고 나면 동일한 양의 로그가 또 쌓여있는 상황을 이상적인 _bufferSize 로 본다.
            if (_bufferCount > _bufferSize) _bufferSize = Math.Min(_bufferSize + 1, int.MaxValue);
            else _bufferSize = Math.Max(_bufferSize - 1, 0);

            if (_bufferCount >= _bufferSize)
                Flush();

            if (ErrorOnConsole)
                Console.WriteLine(text);

            // 이벤트 발생
            ErrorLogged?.Invoke(this, new LoggedEventArgs(text));
        }

        public void Info(string text)
        {
            // thread-safe 인 _writer 를 점유하고 있는 놈이 완전히 처리하기 전에 불리는 count 를 센다.
            _bufferCount++;

            // 새로 생기거나 날짜가 바뀌면 새로운 _streamWriter 를 할당한다.
            if (_fileName == null || !_fileName.StartsWith(DateTime.Now.ToString("yyyyMMdd")))
            {
                lock (_writerCreateLock)
                {
                    if (_writer != null)
                        _writer.Close();

                    string assemblyName = System.Reflection.Assembly.GetEntryAssembly().GetName().Name;
                    _fileName = DateTime.Now.ToString("yyyyMMdd") + "." + assemblyName + ".txt";

                    _writer = TextWriter.Synchronized(new StreamWriter(Path.Combine(_logFolderPath, _fileName), true)); // thread-safe
                }
            }

            // 쓴다.
            if (Async)
                _writer.WriteLineAsync(text);
            else
            {
                _writer.WriteLine(text);
                _writer.Flush();
            }

            // 버퍼에 쌓여있는 양을 처리하고 나면 동일한 양의 로그가 또 쌓여있는 상황을 이상적인 _bufferSize 로 본다.
            if (_bufferCount > _bufferSize) _bufferSize = Math.Min(_bufferSize + 1, int.MaxValue);
            else _bufferSize = Math.Max(_bufferSize - 1, 0);

            if (_bufferCount >= _bufferSize)
                Flush();

            if (InfoOnConsole)
                Console.WriteLine(text);

            // 이벤트 발생
            InfoLogged?.Invoke(this, new LoggedEventArgs(text));
        }

        public void Flush()
        {
            if (_writer != null)
                _writer.Flush();

            _bufferCount = 0;
        }

        private void _timer_Elapsed(object sender, ElapsedEventArgs e)
        {
            Flush();
        }
    }
}